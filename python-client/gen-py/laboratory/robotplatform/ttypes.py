#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import laboratory.ttypes

from thrift.transport import TTransport


class MovementType(object):
    FORWARDS = 1
    BACKWARDS = 2
    LEFT = 3
    RIGHT = 4

    _VALUES_TO_NAMES = {
        1: "FORWARDS",
        2: "BACKWARDS",
        3: "LEFT",
        4: "RIGHT",
    }

    _NAMES_TO_VALUES = {
        "FORWARDS": 1,
        "BACKWARDS": 2,
        "LEFT": 3,
        "RIGHT": 4,
    }


class OrderStruct(object):
    """
    Attributes:
     - movementType
     - param
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'movementType', None, None, ),  # 1
        (2, TType.I32, 'param', None, None, ),  # 2
    )

    def __init__(self, movementType=None, param=None,):
        self.movementType = movementType
        self.param = param

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.movementType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.param = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('OrderStruct')
        if self.movementType is not None:
            oprot.writeFieldBegin('movementType', TType.I32, 1)
            oprot.writeI32(self.movementType)
            oprot.writeFieldEnd()
        if self.param is not None:
            oprot.writeFieldBegin('param', TType.I32, 2)
            oprot.writeI32(self.param)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
