#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from laboratory.camera import Camera
from laboratory.camera.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string startRecording()')
    print('  string stopRecording()')
    print('  string zoomIn(i32 value)')
    print('  string zoomOut(i32 value)')
    print('  string lookUp(i32 angle)')
    print('  string lookDown(i32 angle)')
    print('  string rotateRight(i32 angle)')
    print('  string rotateLeft(i32 angle)')
    print('  Status getStatus()')
    print('   getAvailableCommands()')
    print('  string acquireControl()')
    print('  string releaseControl()')
    print('  void startMonitoring()')
    print('  void stopMonitoring()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Camera.Client(protocol)
transport.open()

if cmd == 'startRecording':
    if len(args) != 0:
        print('startRecording requires 0 args')
        sys.exit(1)
    pp.pprint(client.startRecording())

elif cmd == 'stopRecording':
    if len(args) != 0:
        print('stopRecording requires 0 args')
        sys.exit(1)
    pp.pprint(client.stopRecording())

elif cmd == 'zoomIn':
    if len(args) != 1:
        print('zoomIn requires 1 args')
        sys.exit(1)
    pp.pprint(client.zoomIn(eval(args[0]),))

elif cmd == 'zoomOut':
    if len(args) != 1:
        print('zoomOut requires 1 args')
        sys.exit(1)
    pp.pprint(client.zoomOut(eval(args[0]),))

elif cmd == 'lookUp':
    if len(args) != 1:
        print('lookUp requires 1 args')
        sys.exit(1)
    pp.pprint(client.lookUp(eval(args[0]),))

elif cmd == 'lookDown':
    if len(args) != 1:
        print('lookDown requires 1 args')
        sys.exit(1)
    pp.pprint(client.lookDown(eval(args[0]),))

elif cmd == 'rotateRight':
    if len(args) != 1:
        print('rotateRight requires 1 args')
        sys.exit(1)
    pp.pprint(client.rotateRight(eval(args[0]),))

elif cmd == 'rotateLeft':
    if len(args) != 1:
        print('rotateLeft requires 1 args')
        sys.exit(1)
    pp.pprint(client.rotateLeft(eval(args[0]),))

elif cmd == 'getStatus':
    if len(args) != 0:
        print('getStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.getStatus())

elif cmd == 'getAvailableCommands':
    if len(args) != 0:
        print('getAvailableCommands requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAvailableCommands())

elif cmd == 'acquireControl':
    if len(args) != 0:
        print('acquireControl requires 0 args')
        sys.exit(1)
    pp.pprint(client.acquireControl())

elif cmd == 'releaseControl':
    if len(args) != 0:
        print('releaseControl requires 0 args')
        sys.exit(1)
    pp.pprint(client.releaseControl())

elif cmd == 'startMonitoring':
    if len(args) != 0:
        print('startMonitoring requires 0 args')
        sys.exit(1)
    pp.pprint(client.startMonitoring())

elif cmd == 'stopMonitoring':
    if len(args) != 0:
        print('stopMonitoring requires 0 args')
        sys.exit(1)
    pp.pprint(client.stopMonitoring())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
