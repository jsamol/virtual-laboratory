/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pl.edu.agh.sr.rpc.laboratory.roboticplatform;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-06")
public class AdvancedMobileRoboticPlatform {

  public interface Iface extends MobileRoboticPlatform.Iface {

    public void doSequenceOfMovements(java.util.List<OrderStruct> orders) throws pl.edu.agh.sr.rpc.laboratory.InvalidOperationException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends MobileRoboticPlatform .AsyncIface {

    public void doSequenceOfMovements(java.util.List<OrderStruct> orders, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends MobileRoboticPlatform.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void doSequenceOfMovements(java.util.List<OrderStruct> orders) throws pl.edu.agh.sr.rpc.laboratory.InvalidOperationException, org.apache.thrift.TException
    {
      send_doSequenceOfMovements(orders);
      recv_doSequenceOfMovements();
    }

    public void send_doSequenceOfMovements(java.util.List<OrderStruct> orders) throws org.apache.thrift.TException
    {
      doSequenceOfMovements_args args = new doSequenceOfMovements_args();
      args.setOrders(orders);
      sendBase("doSequenceOfMovements", args);
    }

    public void recv_doSequenceOfMovements() throws pl.edu.agh.sr.rpc.laboratory.InvalidOperationException, org.apache.thrift.TException
    {
      doSequenceOfMovements_result result = new doSequenceOfMovements_result();
      receiveBase(result, "doSequenceOfMovements");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class AsyncClient extends MobileRoboticPlatform.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void doSequenceOfMovements(java.util.List<OrderStruct> orders, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doSequenceOfMovements_call method_call = new doSequenceOfMovements_call(orders, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doSequenceOfMovements_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<OrderStruct> orders;
      public doSequenceOfMovements_call(java.util.List<OrderStruct> orders, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orders = orders;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doSequenceOfMovements", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doSequenceOfMovements_args args = new doSequenceOfMovements_args();
        args.setOrders(orders);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws pl.edu.agh.sr.rpc.laboratory.InvalidOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends MobileRoboticPlatform.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("doSequenceOfMovements", new doSequenceOfMovements());
      return processMap;
    }

    public static class doSequenceOfMovements<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doSequenceOfMovements_args> {
      public doSequenceOfMovements() {
        super("doSequenceOfMovements");
      }

      public doSequenceOfMovements_args getEmptyArgsInstance() {
        return new doSequenceOfMovements_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doSequenceOfMovements_result getResult(I iface, doSequenceOfMovements_args args) throws org.apache.thrift.TException {
        doSequenceOfMovements_result result = new doSequenceOfMovements_result();
        try {
          iface.doSequenceOfMovements(args.orders);
        } catch (pl.edu.agh.sr.rpc.laboratory.InvalidOperationException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends MobileRoboticPlatform.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("doSequenceOfMovements", new doSequenceOfMovements());
      return processMap;
    }

    public static class doSequenceOfMovements<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doSequenceOfMovements_args, Void> {
      public doSequenceOfMovements() {
        super("doSequenceOfMovements");
      }

      public doSequenceOfMovements_args getEmptyArgsInstance() {
        return new doSequenceOfMovements_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            doSequenceOfMovements_result result = new doSequenceOfMovements_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            doSequenceOfMovements_result result = new doSequenceOfMovements_result();
            if (e instanceof pl.edu.agh.sr.rpc.laboratory.InvalidOperationException) {
              result.e = (pl.edu.agh.sr.rpc.laboratory.InvalidOperationException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doSequenceOfMovements_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.doSequenceOfMovements(args.orders,resultHandler);
      }
    }

  }

  public static class doSequenceOfMovements_args implements org.apache.thrift.TBase<doSequenceOfMovements_args, doSequenceOfMovements_args._Fields>, java.io.Serializable, Cloneable, Comparable<doSequenceOfMovements_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doSequenceOfMovements_args");

    private static final org.apache.thrift.protocol.TField ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("orders", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new doSequenceOfMovements_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new doSequenceOfMovements_argsTupleSchemeFactory();

    public java.util.List<OrderStruct> orders; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDERS((short)1, "orders");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDERS
            return ORDERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDERS, new org.apache.thrift.meta_data.FieldMetaData("orders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderStruct.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doSequenceOfMovements_args.class, metaDataMap);
    }

    public doSequenceOfMovements_args() {
    }

    public doSequenceOfMovements_args(
      java.util.List<OrderStruct> orders)
    {
      this();
      this.orders = orders;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doSequenceOfMovements_args(doSequenceOfMovements_args other) {
      if (other.isSetOrders()) {
        java.util.List<OrderStruct> __this__orders = new java.util.ArrayList<OrderStruct>(other.orders.size());
        for (OrderStruct other_element : other.orders) {
          __this__orders.add(new OrderStruct(other_element));
        }
        this.orders = __this__orders;
      }
    }

    public doSequenceOfMovements_args deepCopy() {
      return new doSequenceOfMovements_args(this);
    }

    @Override
    public void clear() {
      this.orders = null;
    }

    public int getOrdersSize() {
      return (this.orders == null) ? 0 : this.orders.size();
    }

    public java.util.Iterator<OrderStruct> getOrdersIterator() {
      return (this.orders == null) ? null : this.orders.iterator();
    }

    public void addToOrders(OrderStruct elem) {
      if (this.orders == null) {
        this.orders = new java.util.ArrayList<OrderStruct>();
      }
      this.orders.add(elem);
    }

    public java.util.List<OrderStruct> getOrders() {
      return this.orders;
    }

    public doSequenceOfMovements_args setOrders(java.util.List<OrderStruct> orders) {
      this.orders = orders;
      return this;
    }

    public void unsetOrders() {
      this.orders = null;
    }

    /** Returns true if field orders is set (has been assigned a value) and false otherwise */
    public boolean isSetOrders() {
      return this.orders != null;
    }

    public void setOrdersIsSet(boolean value) {
      if (!value) {
        this.orders = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ORDERS:
        if (value == null) {
          unsetOrders();
        } else {
          setOrders((java.util.List<OrderStruct>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDERS:
        return getOrders();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ORDERS:
        return isSetOrders();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof doSequenceOfMovements_args)
        return this.equals((doSequenceOfMovements_args)that);
      return false;
    }

    public boolean equals(doSequenceOfMovements_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_orders = true && this.isSetOrders();
      boolean that_present_orders = true && that.isSetOrders();
      if (this_present_orders || that_present_orders) {
        if (!(this_present_orders && that_present_orders))
          return false;
        if (!this.orders.equals(that.orders))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOrders()) ? 131071 : 524287);
      if (isSetOrders())
        hashCode = hashCode * 8191 + orders.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(doSequenceOfMovements_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOrders()).compareTo(other.isSetOrders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orders, other.orders);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("doSequenceOfMovements_args(");
      boolean first = true;

      sb.append("orders:");
      if (this.orders == null) {
        sb.append("null");
      } else {
        sb.append(this.orders);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doSequenceOfMovements_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public doSequenceOfMovements_argsStandardScheme getScheme() {
        return new doSequenceOfMovements_argsStandardScheme();
      }
    }

    private static class doSequenceOfMovements_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<doSequenceOfMovements_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doSequenceOfMovements_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.orders = new java.util.ArrayList<OrderStruct>(_list0.size);
                  OrderStruct _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new OrderStruct();
                    _elem1.read(iprot);
                    struct.orders.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setOrdersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doSequenceOfMovements_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orders != null) {
          oprot.writeFieldBegin(ORDERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.orders.size()));
            for (OrderStruct _iter3 : struct.orders)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doSequenceOfMovements_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public doSequenceOfMovements_argsTupleScheme getScheme() {
        return new doSequenceOfMovements_argsTupleScheme();
      }
    }

    private static class doSequenceOfMovements_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<doSequenceOfMovements_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doSequenceOfMovements_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOrders()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrders()) {
          {
            oprot.writeI32(struct.orders.size());
            for (OrderStruct _iter4 : struct.orders)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doSequenceOfMovements_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.orders = new java.util.ArrayList<OrderStruct>(_list5.size);
            OrderStruct _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new OrderStruct();
              _elem6.read(iprot);
              struct.orders.add(_elem6);
            }
          }
          struct.setOrdersIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class doSequenceOfMovements_result implements org.apache.thrift.TBase<doSequenceOfMovements_result, doSequenceOfMovements_result._Fields>, java.io.Serializable, Cloneable, Comparable<doSequenceOfMovements_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doSequenceOfMovements_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new doSequenceOfMovements_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new doSequenceOfMovements_resultTupleSchemeFactory();

    public pl.edu.agh.sr.rpc.laboratory.InvalidOperationException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, pl.edu.agh.sr.rpc.laboratory.InvalidOperationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doSequenceOfMovements_result.class, metaDataMap);
    }

    public doSequenceOfMovements_result() {
    }

    public doSequenceOfMovements_result(
      pl.edu.agh.sr.rpc.laboratory.InvalidOperationException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doSequenceOfMovements_result(doSequenceOfMovements_result other) {
      if (other.isSetE()) {
        this.e = new pl.edu.agh.sr.rpc.laboratory.InvalidOperationException(other.e);
      }
    }

    public doSequenceOfMovements_result deepCopy() {
      return new doSequenceOfMovements_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public pl.edu.agh.sr.rpc.laboratory.InvalidOperationException getE() {
      return this.e;
    }

    public doSequenceOfMovements_result setE(pl.edu.agh.sr.rpc.laboratory.InvalidOperationException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((pl.edu.agh.sr.rpc.laboratory.InvalidOperationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof doSequenceOfMovements_result)
        return this.equals((doSequenceOfMovements_result)that);
      return false;
    }

    public boolean equals(doSequenceOfMovements_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(doSequenceOfMovements_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("doSequenceOfMovements_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doSequenceOfMovements_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public doSequenceOfMovements_resultStandardScheme getScheme() {
        return new doSequenceOfMovements_resultStandardScheme();
      }
    }

    private static class doSequenceOfMovements_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<doSequenceOfMovements_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doSequenceOfMovements_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new pl.edu.agh.sr.rpc.laboratory.InvalidOperationException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doSequenceOfMovements_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doSequenceOfMovements_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public doSequenceOfMovements_resultTupleScheme getScheme() {
        return new doSequenceOfMovements_resultTupleScheme();
      }
    }

    private static class doSequenceOfMovements_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<doSequenceOfMovements_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doSequenceOfMovements_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doSequenceOfMovements_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new pl.edu.agh.sr.rpc.laboratory.InvalidOperationException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
