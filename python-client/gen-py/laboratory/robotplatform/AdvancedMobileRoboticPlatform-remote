#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from laboratory.robotplatform import AdvancedMobileRoboticPlatform
from laboratory.robotplatform.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string doSequenceOfMovements( orders)')
    print('  string goForwards(i32 distance)')
    print('  string goBackwards(i32 distance)')
    print('  string goRight(i32 angle)')
    print('  string goLeft(i32 angle)')
    print('  Status getStatus()')
    print('   getAvailableCommands()')
    print('  string acquireControl()')
    print('  string releaseControl()')
    print('  void startMonitoring()')
    print('  void stopMonitoring()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = AdvancedMobileRoboticPlatform.Client(protocol)
transport.open()

if cmd == 'doSequenceOfMovements':
    if len(args) != 1:
        print('doSequenceOfMovements requires 1 args')
        sys.exit(1)
    pp.pprint(client.doSequenceOfMovements(eval(args[0]),))

elif cmd == 'goForwards':
    if len(args) != 1:
        print('goForwards requires 1 args')
        sys.exit(1)
    pp.pprint(client.goForwards(eval(args[0]),))

elif cmd == 'goBackwards':
    if len(args) != 1:
        print('goBackwards requires 1 args')
        sys.exit(1)
    pp.pprint(client.goBackwards(eval(args[0]),))

elif cmd == 'goRight':
    if len(args) != 1:
        print('goRight requires 1 args')
        sys.exit(1)
    pp.pprint(client.goRight(eval(args[0]),))

elif cmd == 'goLeft':
    if len(args) != 1:
        print('goLeft requires 1 args')
        sys.exit(1)
    pp.pprint(client.goLeft(eval(args[0]),))

elif cmd == 'getStatus':
    if len(args) != 0:
        print('getStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.getStatus())

elif cmd == 'getAvailableCommands':
    if len(args) != 0:
        print('getAvailableCommands requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAvailableCommands())

elif cmd == 'acquireControl':
    if len(args) != 0:
        print('acquireControl requires 0 args')
        sys.exit(1)
    pp.pprint(client.acquireControl())

elif cmd == 'releaseControl':
    if len(args) != 0:
        print('releaseControl requires 0 args')
        sys.exit(1)
    pp.pprint(client.releaseControl())

elif cmd == 'startMonitoring':
    if len(args) != 0:
        print('startMonitoring requires 0 args')
        sys.exit(1)
    pp.pprint(client.startMonitoring())

elif cmd == 'stopMonitoring':
    if len(args) != 0:
        print('stopMonitoring requires 0 args')
        sys.exit(1)
    pp.pprint(client.stopMonitoring())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
